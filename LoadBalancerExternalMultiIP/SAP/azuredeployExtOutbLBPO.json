{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualNetworkResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group VNET where the virtual network resides"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "VNET Name"
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the subnet inside the VNET"
      }
    },
    "loadBalancerName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Load Balancer"
      }
    },
    "publicIPAddressName1": {
      "type": "string",
      "defaultValue": "PIP1",
      "metadata": {
        "description": "Existing static Public IP name"
      }
    },
    "publicIPAddressName2": {
      "type": "string",
      "defaultValue": "PIP2",
      "metadata": {
        "description": "Existing static Public IP name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "virtualNetworkResourceGroup": "[parameters('virtualNetworkResourceGroup')]",
    "virtualNetworkName": "[parameters('virtualNetworkName')]",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
    "subnetName": "[parameters('subnetName')]",
    "loadBalancerName": "[parameters('loadBalancerName')]",
    "nicName": "networkInterface1",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('subnetName'))]",
    "publicIPAddressName1": "[parameters('publicIPAddressName1')]",
    "publicIPAddressName2": "[parameters('publicIPAddressName2')]",
    "publicIPAddressID1": "[resourceId(resourceGroup().name,'Microsoft.Network/publicIPAddresses',variables('publicIPAddressName1'))]",
    "publicIPAddressID2": "[resourceId(resourceGroup().name,'Microsoft.Network/publicIPAddresses',variables('publicIPAddressName2'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "frontEndIPConfigID1": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd1')]",
    "frontEndIPConfigID2": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd2')]",
    "lbBackendPoolID1": "[concat(variables('lbID'),'/backendAddressPools/BackendPoolProd')]",
    "lbBackendPoolID2": "[concat(variables('lbID'),'/backendAddressPools/BackendPoolQA')]",
    "lbProbeID1": "[concat(variables('lbID'),'/probes/healthprobepo1')]",
    "lbProbeID2": "[concat(variables('lbID'),'/probes/healthprobepo2')]"
  },
  "resources": [
    {
      "apiVersion": "2018-07-01",
      "name": "[variables('loadBalancerName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "dependsOn": [
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd1",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID1')]"
              }
            }
          },
          {
            "name": "loadBalancerFrontEnd2",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID2')]"
              }
            }
          }

        ],
        "backendAddressPools": [
          {
            "name": "BackendPoolProd"
          },
          {
            "name": "BackendPoolQA"
          }
        ],
        //"outboundRules": [
        //  {
        //    "name": "outboundruleProd",
        //    "frontendIPConfigurations": ["loadBalancerFrontEnd1"],
        //    "allocatedOutboundPorts": "512",
        //    "idleTimeoutInMinutes": 4,
        //    "enableTcpReset": true,
        //    "protocol": "All",
        //    "backendAddressPool": "BackendPoolProd"
        //  },
        //  {
        //    "name": "outboundruleQA",
        //    "frontendIPConfigurations": ["loadBalancerFrontEnd2"],
        //    "allocatedOutboundPorts": "512",
        //    "idleTimeoutInMinutes": 4,
        //    "enableTcpReset": true,
        //    "protocol": "All",
        //    "backendAddressPool": "BackendPoolQA"
        //  }
        //],
        "loadBalancingRules": [
          {
            "name": "lbrule1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID1')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackendPoolID1')]"
              },
              "probe": {
                "id": "[variables('lbProbeID1')]"
              },
              "protocol": "Tcp",
              "frontendPort": 33333,
              "backendPort": 33333,
              "idleTimeoutInMinutes": 5
            }
          },
          {
            "name": "lbrule2",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID2')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbBackendPoolID2')]"
              },
              "probe": {
                "id": "[variables('lbProbeID1')]"
              },
              "protocol": "Tcp",
              "frontendPort": 33333,
              "backendPort": 33333,
              "idleTimeoutInMinutes": 5
            }
          }
        ],
        "probes": [
          {
            "name": "healthprobepo1",
            "properties": {
              "protocol": "Tcp",
              "port": 62000,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      }
    }
  ]
}
